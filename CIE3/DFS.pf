class Graph:
    def __init__(self):
         self.adjacency_list = {}

    def add_edge(self, u, v):
        if u not in self.adjacency_list:
            self.adjacency_list[u] = []
        self.adjacency_list[u].append(v)

        if v not in self.adjacency_list:
            self.adjacency_list[v] = []
        self.adjacency_list[v].append(u)

    def dfs(self, start_vertex):
        visited = set()
        traversal_order = []

        def dfs_helper(vertex):
            visited.add(vertex)
            traversal_order.append(vertex)
            print(vertex, end=" ")

            for neighbor in self.adjacency_list.get(vertex, []):
                if neighbor not in visited:
                    dfs_helper(neighbor)

        print("Depth-First Search Traversal:")
        dfs_helper(start_vertex)
        print()  
        return traversal_order


graph = Graph()
graph.add_edge(0, 1)
graph.add_edge(0, 2)
graph.add_edge(1, 3)
graph.add_edge(1, 4)
graph.add_edge(2, 5)
graph.add_edge(2, 6)

traversal = graph.dfs(0)
print("Traversal Order:", traversal)    
